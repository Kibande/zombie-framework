
#include <framework/framework.hpp>
#include <framework/ctr/ctr.hpp>

namespace zfw
{
    static int put_x = 0, put_y = 0;
    static u8* fb1, * fb2;

    static const int W = 6, H = 11;
    static const int ScreenW = 320, ScreenH = 240;
    static const u8 R = 0xff, G = 0xff, B = 0xff;

    static const uint8_t font[96 * 11] =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x18, 0x00, 0x03, 0x00, 0x00, 
        0x00, 0x04, 0x0A, 0x0A, 0x04, 0x00, 0x00, 0x04, 
        0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x0E, 0x0F, 0x0E, 0x0F, 0x1F, 0x1F, 0x0E, 
        0x11, 0x0E, 0x10, 0x11, 0x01, 0x11, 0x11, 0x0E, 
        0x0F, 0x0E, 0x0F, 0x0E, 0x1F, 0x11, 0x11, 0x11, 
        0x11, 0x11, 0x1F, 0x1C, 0x02, 0x07, 0x00, 0x00, 
        0x02, 0x00, 0x01, 0x00, 0x10, 0x00, 0x0C, 0x00, 
        0x01, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 
        0x00, 0x04, 0x0A, 0x0A, 0x0E, 0x12, 0x06, 0x04, 
        0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
        0x0E, 0x04, 0x0E, 0x0E, 0x08, 0x1F, 0x0E, 0x1F, 
        0x0E, 0x0E, 0x00, 0x00, 0x10, 0x00, 0x02, 0x0E, 
        0x0E, 0x11, 0x11, 0x11, 0x11, 0x01, 0x01, 0x11, 
        0x11, 0x04, 0x10, 0x09, 0x01, 0x1B, 0x13, 0x11, 
        0x11, 0x11, 0x11, 0x11, 0x04, 0x11, 0x11, 0x11, 
        0x11, 0x11, 0x10, 0x04, 0x02, 0x04, 0x04, 0x00, 
        0x04, 0x00, 0x01, 0x00, 0x10, 0x00, 0x02, 0x00, 
        0x01, 0x04, 0x04, 0x01, 0x04, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 
        0x00, 0x04, 0x0A, 0x1F, 0x15, 0x15, 0x09, 0x04, 
        0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x08, 
        0x11, 0x06, 0x11, 0x11, 0x0C, 0x01, 0x01, 0x10, 
        0x11, 0x11, 0x00, 0x00, 0x08, 0x00, 0x04, 0x11, 
        0x11, 0x11, 0x11, 0x01, 0x11, 0x01, 0x01, 0x01, 
        0x11, 0x04, 0x10, 0x05, 0x01, 0x15, 0x13, 0x11, 
        0x11, 0x11, 0x11, 0x01, 0x04, 0x11, 0x11, 0x11, 
        0x0A, 0x0A, 0x08, 0x04, 0x04, 0x04, 0x0A, 0x00, 
        0x08, 0x00, 0x01, 0x00, 0x10, 0x00, 0x02, 0x00, 
        0x01, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x06, 
        0x00, 0x04, 0x00, 0x0A, 0x05, 0x0A, 0x05, 0x00, 
        0x02, 0x08, 0x15, 0x04, 0x00, 0x00, 0x00, 0x08, 
        0x19, 0x05, 0x10, 0x10, 0x0A, 0x0F, 0x0F, 0x08, 
        0x11, 0x11, 0x0C, 0x06, 0x04, 0x1F, 0x08, 0x10, 
        0x1D, 0x1F, 0x0F, 0x01, 0x11, 0x0F, 0x0F, 0x1D, 
        0x1F, 0x04, 0x10, 0x03, 0x01, 0x15, 0x15, 0x11, 
        0x0F, 0x11, 0x0F, 0x0E, 0x04, 0x11, 0x11, 0x15, 
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x11, 0x00, 
        0x00, 0x0E, 0x0D, 0x1E, 0x1E, 0x0E, 0x0E, 0x1E, 
        0x0D, 0x06, 0x06, 0x09, 0x04, 0x0F, 0x0F, 0x0E, 
        0x0D, 0x1E, 0x0D, 0x0E, 0x0F, 0x11, 0x11, 0x11, 
        0x11, 0x11, 0x1F, 0x04, 0x04, 0x04, 0x02, 0x0F, 
        0x00, 0x04, 0x00, 0x1F, 0x0E, 0x04, 0x02, 0x00, 
        0x02, 0x08, 0x0E, 0x1F, 0x00, 0x1F, 0x00, 0x04, 
        0x15, 0x04, 0x08, 0x0C, 0x09, 0x10, 0x11, 0x08, 
        0x0E, 0x1E, 0x0C, 0x06, 0x02, 0x00, 0x10, 0x08, 
        0x15, 0x11, 0x11, 0x01, 0x11, 0x01, 0x01, 0x11, 
        0x11, 0x04, 0x10, 0x05, 0x01, 0x11, 0x15, 0x11, 
        0x01, 0x11, 0x09, 0x10, 0x04, 0x11, 0x0A, 0x15, 
        0x0A, 0x04, 0x02, 0x04, 0x08, 0x04, 0x00, 0x00, 
        0x00, 0x10, 0x13, 0x01, 0x11, 0x11, 0x02, 0x11, 
        0x13, 0x04, 0x04, 0x05, 0x04, 0x15, 0x11, 0x11, 
        0x13, 0x11, 0x13, 0x01, 0x02, 0x11, 0x11, 0x15, 
        0x0A, 0x11, 0x08, 0x03, 0x04, 0x18, 0x15, 0x0F, 
        0x00, 0x04, 0x00, 0x0A, 0x14, 0x0A, 0x15, 0x00, 
        0x02, 0x08, 0x15, 0x04, 0x00, 0x00, 0x00, 0x04, 
        0x13, 0x04, 0x04, 0x10, 0x1F, 0x10, 0x11, 0x04, 
        0x11, 0x10, 0x00, 0x00, 0x04, 0x1F, 0x08, 0x04, 
        0x1D, 0x11, 0x11, 0x01, 0x11, 0x01, 0x01, 0x11, 
        0x11, 0x04, 0x11, 0x09, 0x01, 0x11, 0x19, 0x11, 
        0x01, 0x15, 0x11, 0x10, 0x04, 0x11, 0x0A, 0x15, 
        0x11, 0x04, 0x01, 0x04, 0x08, 0x04, 0x00, 0x00, 
        0x00, 0x1E, 0x11, 0x01, 0x11, 0x1F, 0x02, 0x11, 
        0x11, 0x04, 0x04, 0x07, 0x04, 0x15, 0x11, 0x11, 
        0x11, 0x11, 0x01, 0x0E, 0x02, 0x11, 0x0A, 0x15, 
        0x04, 0x11, 0x04, 0x04, 0x04, 0x04, 0x08, 0x06, 
        0x00, 0x00, 0x00, 0x0A, 0x15, 0x15, 0x09, 0x00, 
        0x04, 0x04, 0x04, 0x04, 0x06, 0x00, 0x06, 0x02, 
        0x11, 0x04, 0x02, 0x11, 0x08, 0x11, 0x11, 0x04, 
        0x11, 0x10, 0x0C, 0x06, 0x08, 0x00, 0x04, 0x00, 
        0x01, 0x11, 0x11, 0x11, 0x11, 0x01, 0x01, 0x11, 
        0x11, 0x04, 0x11, 0x11, 0x01, 0x11, 0x19, 0x11, 
        0x01, 0x09, 0x11, 0x11, 0x04, 0x11, 0x04, 0x0A, 
        0x11, 0x04, 0x01, 0x04, 0x10, 0x04, 0x00, 0x00, 
        0x00, 0x11, 0x11, 0x01, 0x19, 0x01, 0x02, 0x19, 
        0x11, 0x04, 0x04, 0x09, 0x04, 0x15, 0x11, 0x11, 
        0x11, 0x19, 0x01, 0x10, 0x02, 0x19, 0x0A, 0x15, 
        0x0A, 0x19, 0x02, 0x04, 0x04, 0x04, 0x00, 0x00, 
        0x00, 0x04, 0x00, 0x00, 0x0E, 0x09, 0x16, 0x00, 
        0x04, 0x04, 0x00, 0x00, 0x06, 0x00, 0x06, 0x02, 
        0x0E, 0x04, 0x1F, 0x0E, 0x08, 0x0E, 0x0E, 0x04, 
        0x0E, 0x0E, 0x0C, 0x06, 0x10, 0x00, 0x02, 0x04, 
        0x1E, 0x11, 0x0F, 0x0E, 0x0F, 0x1F, 0x01, 0x0E, 
        0x11, 0x0E, 0x0E, 0x11, 0x1F, 0x11, 0x11, 0x0E, 
        0x01, 0x16, 0x11, 0x0E, 0x04, 0x0E, 0x04, 0x0A, 
        0x11, 0x04, 0x1F, 0x04, 0x10, 0x04, 0x00, 0x00, 
        0x00, 0x1E, 0x0F, 0x1E, 0x16, 0x1E, 0x02, 0x16, 
        0x11, 0x0C, 0x04, 0x11, 0x18, 0x15, 0x11, 0x0E, 
        0x0F, 0x16, 0x01, 0x0F, 0x0C, 0x16, 0x04, 0x0A, 
        0x11, 0x16, 0x1F, 0x04, 0x04, 0x04, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
        0x08, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x1C, 0x20, 0x07, 0x00, 0x3F, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x10, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x0E, 0x00, 0x18, 0x00, 0x03, 0x00, 0x00
    };

    static void ShiftUp()
    {
        for (int xx = 0; xx < 320; xx++)
        {
            memmove(&fb1[(xx * 240 + H) * 3], &fb1[(xx * 240) * 3], (240 - H) * 3);
            memmove(&fb2[(xx * 240 + H) * 3], &fb2[(xx * 240) * 3], (240 - H) * 3);
            memset(&fb1[(xx * 240) * 3], 0x00, H * 3);
            memset(&fb2[(xx * 240) * 3], 0x00, H * 3);
        }
    }

    static void PutChar(char c)
    {
        if ((put_y + 1) * H >= ScreenH)
        {
            ShiftUp();
            put_y--;
        }

        if (c >= 0x20 && c < 0x80)
        {
            c -= 0x20;

            int x = put_x * W;
            int y = put_y * H;

            for (int yy = y; yy < y + H; yy++)
            {
                uint8_t bits = font[96 * (yy - y) + c];
                for (int xx = x; xx < x + W; xx++)
                {
                    fb1[(xx * 240 + 239 - yy) * 3] = (bits & 1) * B;
                    fb1[(xx * 240 + 239 - yy) * 3 + 1] = (bits & 1) * G;
                    fb1[(xx * 240 + 239 - yy) * 3 + 2] = (bits & 1) * R;

                    fb2[(xx * 240 + 239 - yy) * 3] = (bits & 1) * B;
                    fb2[(xx * 240 + 239 - yy) * 3 + 1] = (bits & 1) * G;
                    fb2[(xx * 240 + 239 - yy) * 3 + 2] = (bits & 1) * R;

                    bits >>= 1;
                }
            }
        }

        put_x++;

        if (c == '\n' || (put_x + 1) * W >= ScreenW)
        {
            put_x = 0;
            put_y++;
        }
    }

    static void PutStr(const char* str)
    {
        while (*str)
            PutChar(*(str++));
    }

    void CtrPrintInit()
    {
        fb1 = gfxGetFramebuffer(GFX_BOTTOM, GFX_LEFT, NULL, NULL);
        fb2 = fb1 - (320 * 240 * 3);
    }

    int CtrPrints(const char* format)
    {
        PutStr(format);
        gfxFlushBuffers();
        gfxSwapBuffers();

        return 0;
    }

    int CtrPrintfv(const char* format, va_list args)
    {
        char buffer[256];
        int len = vsnprintf(buffer, sizeof(buffer), format, args);
        CtrPrints(buffer);

        return len;
    }
}
